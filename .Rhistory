knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, dplyr, wesanderson)
leaders <- read.csv("leaders.csv")
leaders <- leaders[(1:250), (14:28)]
# The ggplot argument takes the data you will use, mapping = aes() are the characteristics to use in the
# subsequent geoms (layers) of your graph
# I set color = result so that the dots will be colored based on the result of the assassination attempt
ggplot(data = leaders, mapping = aes(x = politybefore, y = polityafter, color = result)) +
# geom_point tells ggplot to make a scatterplot
geom_point() +
# labs is used to assign titles; the defaults are variable names
labs(title = "Scatterplot of Polity Score Before and After \n an Assassination Attempt",
x = "Polity Score Before Attempt",
y = "Polity Score After Attempt",
color = "Result of Attempt")
plot(x = leaders$politybefore, y = leaders$polityafter,
main = "Scatterplot: Polity Scores Before and After Assassination",
xlab = "Polity Before",
ylab = "Polity After")
cor(x = leaders$politybefore, y = leaders$polityafter, use = "pairwise.complete.obs")
ggplot(data = leaders, aes(x = continent, y = politybefore, group = as.factor(continent))) +
geom_boxplot() +
labs(title = "Boxplots of Polity Score Before an Assassination", subtitle = "By Continent",
x = "Continent", y = "Polity Score")
ggplot(data = leaders, aes(x = continent, y = politybefore, group = as.factor(continent))) +
geom_violin() +
labs(title = "Boxplots of Polity Score Before an Assassination", subtitle = "By Continent",
x = "Continent", y = "Polity Score")
boxplot(formula = politybefore ~ continent, data = leaders,
main = "Boxplots of Polity Score Before an Assassination",
xlab = "Continent", ylab = "Polity Score")
# Since there are many values for an assassination attempt, I create a new dummy variable
leaders$dummy <- ifelse(leaders$result == "dies between a day and a week"|
leaders$result =="dies between a week and a month"|
leaders$result == "dies within a day after the attack"|
leaders$result == "dies, timing unknown"|
leaders$result == "hospitalization but no permanent disability"|
leaders$result == "not wounded"|
leaders$result == "plot stopped"|
leaders$result == "survives but wounded severely"|
leaders$result == "survives, whether wounded unknown"|
leaders$result == "wounded lightly", 1, 0)
year.range <- max(leaders$year) - min(leaders$year)
year.range
americas <- subset(leaders, leaders$continent == "Americas")
asia <- subset(leaders, leaders$continent == "Asia"|
leaders$region ==  "Western Asia")
europe <- subset(leaders, leaders$continent == "Europe")
# These next lines creates lists with name = year and the value = number of assassination attempts
americas.assassinations <- tapply(americas$dummy, americas$decade, sum)
asia.assassinations <- tapply(asia$dummy, asia$decade, sum)
europe.assassinations <- tapply(europe$dummy, europe$decade, sum)
# The first layer; choose one subset to plot
plot(x = names(americas.assassinations), y = americas.assassinations, col = "black", type = "l",
ylim = c(0, 15),
# The next three lines add titles
main = "Assassinations by Decade and Region",
xlab = "Decade",
ylab = "Number of Assassinations")
# Add layers to the plot; you can change the line type (lty) to differentiate the regions
lines(names(asia.assassinations), asia.assassinations, lty = "dotdash", type = "l")
lines(names(europe.assassinations), europe.assassinations, lty = "longdash", type = "l")
# Add text layers to the plot to identify each region
# Run the plot first to get a rough idea of where to place your text
text(1980, 10, "Asia")
text(1930, 12, "Europe")
text(1890, 8, "America")
ggplot(data = leaders, mapping = aes(x = leaders$dummy,
fill = as.factor(decade))) +
geom_bar(position = "dodge") +
labs(title = "Assassination Attempts by Year", x = "Assassination Attempt",
y = "Number of Occurences", fill = "Year")
ggplot(data = leaders, mapping = aes(x = leaders$decade,
fill = as.factor(continent))) +
geom_bar(position = "dodge") +
labs(title = "Assassination Attempts by Year", x = "Year",
y = "Number of Assassinations", fill = "Continent")
View(leaders)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, dplyr, wesanderson, texreg)
leaders <- read.csv("leaders.csv")
leaders$success <- ifelse(leaders$result == "dies between a day and a week"|
leaders$result =="dies between a week and a month"|
leaders$result == "dies within a day after the attack"|
leaders$result == "dies, timing unknown", 1, 0)
leaders <- mutate(leaders, diff = polityafter - politybefore)
# Use the lm function to do a regression
# Place one variable on the left of the ~, it is your outcome or dependent variables
# The variables to the right are the independent variables; they predict the outcome variable
model1 <- lm(diff ~ success, data = leaders)
model2 <- lm(diff ~ success + age, data = leaders)
model3 <- lm(diff ~ success + age + region + decade)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, dplyr, wesanderson, texreg)
leaders <- read.csv("leaders.csv")
leaders$success <- ifelse(leaders$result == "dies between a day and a week"|
leaders$result =="dies between a week and a month"|
leaders$result == "dies within a day after the attack"|
leaders$result == "dies, timing unknown", 1, 0)
leaders <- mutate(leaders, diff = polityafter - politybefore)
# Use the lm function to do a regression
# Place one variable on the left of the ~, it is your outcome or dependent variables
# The variables to the right are the independent variables; they predict the outcome variable
model1 <- lm(diff ~ success, data = leaders)
model2 <- lm(diff ~ success + age, data = leaders)
model3 <- lm(diff ~ success + age + region + decade, data = leaders)
# Two different ways to visualize your regression
# screenreg() is a function from the texreg package; it is useful for showing multiple models that use
# the same outcome variable
screenreg(list(model1, model2, model3), custom.model.names = c("Basic Model", "Model 2", "Full Model"))
# summary calls all the information
# Estimate is the effect of the independent variable on the dependent variable
# Standard deviation is the distance from the estimate approcximately 50% of observations are within
summary(model1)
leaders[, c("fit", "lwr", "upr")] <- predict(model3, leaders, interval = "confidence")
summary(model2)
# We add three new columsn to the leaders dataset, for the estimate, and the lower and upper bounds
# of the confidence interval (based on the standard deviation)
# we use the predict function, calling the model, then the dataset to draw values from
# set interval = confidence; the default is the 95% confidence interval
leaders[, c("fit", "lwr", "upr")] <- predict(model3, leaders, interval = "confidence")
ggplot(leaders, aes(x = decade, y = diff, color = success)) + geom_point()
ggplot(leaders, aes(x = decade, y = diff, color = as.factor(success))) + geom_point()
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept") +
geom_point(inherit.aes = FALS, data = leaders,
mapping = aes(x = year, y = fit, color = success), shape = 6)
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept") +
geom_point(inherit.aes = FALSE, data = leaders,
mapping = aes(x = year, y = fit, color = success), shape = 6)
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept") +
geom_point(inherit.aes = FALSE, data = leaders,
mapping = aes(x = year, y = fit, color = as.factor(success)), shape = 6)
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept",
subtitle = "Actual Values are Circles, Predicted Values are Triangles") +
geom_point(inherit.aes = FALSE, data = leaders,
mapping = aes(x = year, y = fit, color = as.factor(success)), shape = 6)
# The first layer plots the actual values
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept",
subtitle = "Actual Values are Circles, Predicted Values are Triangles") +
# here I add another layer of geom_point, I set inherit.aes = FALSE so that it does not use the same
# aesthetics as it did in the first layer, I give the points a different shape to see the difference
# between our predicted and actual data
geom_point(inherit.aes = FALSE, data = leaders,
mapping = aes(x = year, y = fit, color = as.factor(success)), shape = 6,
colour = wes_palette(n = 2, name = "FantasticFox1"))
# The first layer plots the actual values
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept",
subtitle = "Actual Values are Circles, Predicted Values are Triangles") +
# here I add another layer of geom_point, I set inherit.aes = FALSE so that it does not use the same
# aesthetics as it did in the first layer, I give the points a different shape to see the difference
# between our predicted and actual data
geom_point(inherit.aes = FALSE, data = leaders,
mapping = aes(x = year, y = fit, color = as.factor(success)), shape = 6,
color = wes_palette(n = 2, name = "FantasticFox1"))
# The first layer plots the actual values
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept",
subtitle = "Actual Values are Circles, Predicted Values are Triangles") +
# here I add another layer of geom_point, I set inherit.aes = FALSE so that it does not use the same
# aesthetics as it did in the first layer, I give the points a different shape to see the difference
# between our predicted and actual data
geom_point(inherit.aes = FALSE, data = leaders,
mapping = aes(x = year, y = fit, color = as.factor(success)), shape = 17)
# The first layer plots the actual values
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept",
subtitle = "Actual Values are Circles, Predicted Values are Triangles") +
# here I add another layer of geom_point, I set inherit.aes = FALSE so that it does not use the same
# aesthetics as it did in the first layer, I give the points a different shape to see the difference
# between our predicted and actual data
geom_point(inherit.aes = FALSE, data = leaders,
mapping = aes(x = year, y = fit, color = as.factor(success)), shape = 17, size = 1.25)
# The first layer plots the actual values
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept",
subtitle = "Actual Values are Circles, Predicted Values are Triangles") +
# here I add another layer of geom_point, I set inherit.aes = FALSE so that it does not use the same
# aesthetics as it did in the first layer, I give the points a different shape to see the difference
# between our predicted and actual data
geom_point(inherit.aes = FALSE, data = leaders,
mapping = aes(x = year, y = fit, color = as.factor(success)), shape = 17, size = 1.75)
# The first layer plots the actual values
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept",
subtitle = "Actual Values are Circles, Predicted Values are Triangles") +
# here I add another layer of geom_point, I set inherit.aes = FALSE so that it does not use the same
# aesthetics as it did in the first layer, I give the points a different shape to see the difference
# between our predicted and actual data
geom_point(inherit.aes = FALSE, data = leaders,
mapping = aes(x = year, y = fit, color = as.factor(success)), shape = 17, size = 2.5)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ggplot2, dplyr, wesanderson, texreg)
leaders <- read.csv("leaders.csv")
leaders$success <- ifelse(leaders$result == "dies between a day and a week"|
leaders$result =="dies between a week and a month"|
leaders$result == "dies within a day after the attack"|
leaders$result == "dies, timing unknown", 1, 0)
leaders <- mutate(leaders, diff = polityafter - politybefore)
# Use the lm function to do a regression
# Place one variable on the left of the ~, it is your outcome or dependent variables
# The variables to the right are the independent variables; they predict the outcome variable
model1 <- lm(diff ~ success, data = leaders)
model2 <- lm(diff ~ success + age, data = leaders)
model3 <- lm(diff ~ success * age + region + decade, data = leaders)
# Two different ways to visualize your regression
# screenreg() is a function from the texreg package; it is useful for showing multiple models that use
# the same outcome variable
screenreg(list(model1, model2, model3), custom.model.names = c("Basic Model", "Model 2", "Full Model"))
# summary calls all the information
# Estimate is the effect of the independent variable on the dependent variable
# Standard deviation is the distance from the estimate approcximately 50% of observations are within
summary(model2)
# We add three new columsn to the leaders dataset, for the estimate, and the lower and upper bounds
# of the confidence interval (based on the standard deviation)
# we use the predict function, calling the model, then the dataset to draw values from
# set interval = confidence; the default is the 95% confidence interval
leaders[, c("fit", "lwr", "upr")] <- predict(model3, leaders, interval = "confidence")
# The first layer plots the actual values
ggplot(leaders, aes(x = year, y = diff, color = as.factor(success))) + geom_point() +
labs(title = "Change in Polity Score in Countries with Leader Assassination Attempt, by Year",
x = "Year", y = "Post - Pre Polity Score", color = "Success of \n Attmept",
subtitle = "Actual Values are Circles, Predicted Values are Triangles") +
# here I add another layer of geom_point, I set inherit.aes = FALSE so that it does not use the same
# aesthetics as it did in the first layer, I give the points a different shape to see the difference
# between our predicted and actual data
geom_point(inherit.aes = FALSE, data = leaders,
mapping = aes(x = year, y = fit, color = as.factor(success)), shape = 17, size = 2.5)
